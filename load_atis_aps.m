function aps_data=load_atis_aps(filename, snapfile, flipX, flipY)
% aps_data = load_atis_aps(filename, snapfile = '',  flipX=0, flipY=0)
% aps_data = load_atis_aps(filename)
%
% Loads data from files generated by the StreamLogger consumer for an APS data
% stream. This function read the events from the file and looks for pair of
% conversion events. Its output consists of the inverses of the integration time
% for each successful gray level acquisition (which are directly representatives
% of gray levels).

% timestamps are in uS
% aps_data is a structure containing the fields ts, x, y and gray
%
% flipX, flipY allow to flip the image around the X and Y axes. If these values
% are non zero, the corresponding dimension will be flipped considering its size
% to be the value contained in the 'flip' variable (i.e. X = flipX - X)
% (They defaults to 0 if non-specified)

if ~exist('flipX','var')
    flipX = 0;
end
if ~exist('flipY','var')
    flipY = 0;
end

height = 0;
width = 0;

output_index = 1;


td_data = load_atis_data(filename, flipX, flipY);

if exist('snapfile', 'var') && ~isempty(snapfile) 
    fileID = fopen(snapfile, 'r');
    if fileID < 0
        disp 'Provided snapshot file does not exist, ignoring it'
    end
else
    fileID = -1;
end

if fileID >= 0
    fscanf(fileID, '%f',1);
    v = fscanf(fileID, '%f',1);
    height = fscanf(fileID, '%f',1);
    width = fscanf(fileID, '%f',1);
    conv_start = -1*ones(width+1,height+1);
    aps_data.ts = zeros(1,width*height+sum(td_data.p==1));
    aps_data.x = zeros(size(aps_data.ts));
    aps_data.y = zeros(size(aps_data.ts));
    aps_data.gray = zeros(size(aps_data.ts));

    for j = 1:height
    for i = 1:width
        apsvalid = fscanf(fileID, '%f',1);
        c = fscanf(fileID, '%f',1);
        lmesurement = fscanf(fileID, '%f',1);
        conv_start(i,j) = fscanf(fileID, '%f',1);
        ltd = fscanf(fileID, '%f',1);
        svalid = fscanf(fileID, '%f',1);

        if lmesurement > 0
            aps_data.ts(output_index) = 0;
            aps_data.x(output_index) = i-1;
            aps_data.y(output_index) = j-1;
            aps_data.gray(output_index) = lmesurement;
            output_index=output_index+1;
        end
    end
    fscanf(fileID, '%f',1);
    end
else
% no snap file
    conv_start = -1*ones(max(td_data.x)+1,max(td_data.y)+1);
    aps_data.ts = zeros(1,sum(td_data.p==1));
    aps_data.x = zeros(size(aps_data.ts));
    aps_data.y = zeros(size(aps_data.ts));
    aps_data.gray = zeros(size(aps_data.ts));
end
for i=1:length(td_data.ts)
    if td_data.p(i)==1
        if conv_start(td_data.x(i)+1,td_data.y(i)+1) > 0
            aps_data.ts(output_index) = td_data.ts(i);
            aps_data.x(output_index) = td_data.x(i);
            aps_data.y(output_index) = td_data.y(i);
            aps_data.gray(output_index) = 1/(td_data.ts(i)-conv_start(td_data.x(i)+1,td_data.y(i)+1));
            output_index=output_index+1;
            conv_start(td_data.x(i)+1,td_data.y(i)+1) = -1;
        end
    else
        conv_start(td_data.x(i)+1,td_data.y(i)+1) = td_data.ts(i);
    end
end
aps_data.ts(output_index:end) = [];
aps_data.x(output_index:end) = [];
aps_data.y(output_index:end) = [];
aps_data.gray(output_index:end) = [];
end

